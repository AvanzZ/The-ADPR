<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Human Bingo with Rotation</title>
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div id="root" class="min-h-screen flex items-start justify-center p-6"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;

    // Sample roster of 25 names
    const roster = [
      "Alice","Bob","Carol","David","Emma",
      "Frank","Grace","Henry","Irene","Jack",
      "Karen","Leo","Mona","Nathan","Olivia",
      "Paul","Quinn","Rachel","Steve","Tina",
      "Uma","Victor","Wendy","Xavier","Yara"
    ];

    // Six-round schedule (five tables per round)
    const schedule = [
      [ ["Alice","Bob","Carol","David","Emma"],
        ["Frank","Grace","Henry","Irene","Jack"],
        ["Karen","Leo","Mona","Nathan","Olivia"],
        ["Paul","Quinn","Rachel","Steve","Tina"],
        ["Uma","Victor","Wendy","Xavier","Yara"] ],
      [ ["Alice","Frank","Karen","Paul","Uma"],
        ["Bob","Grace","Leo","Quinn","Victor"],
        ["Carol","Henry","Mona","Rachel","Wendy"],
        ["David","Irene","Nathan","Steve","Xavier"],
        ["Emma","Jack","Olivia","Tina","Yara"] ],
      [ ["Alice","Grace","Mona","Steve","Yara"],
        ["Bob","Henry","Olivia","Tina","Uma"],
        ["Carol","Irene","Paul","Quinn","Victor"],
        ["David","Jack","Karen","Rachel","Wendy"],
        ["Emma","Frank","Leo","Nathan","Xavier"] ],
      [ ["Alice","Henry","Olivia","Quinn","Xavier"],
        ["Bob","Irene","Karen","Steve","Yara"],
        ["Carol","Jack","Leo","Tina","Uma"],
        ["David","Frank","Mona","Rachel","Victor"],
        ["Emma","Grace","Nathan","Paul","Wendy"] ],
      [ ["Alice","Irene","Leo","Steve","Wendy"],
        ["Bob","Jack","Mona","Paul","Xavier"],
        ["Carol","Frank","Nathan","Tina","Yara"],
        ["David","Grace","Olivia","Quinn","Uma"],
        ["Emma","Henry","Karen","Rachel","Victor"] ],
      [ ["Alice","Jack","Nathan","Quinn","Victor"],
        ["Bob","Frank","Olivia","Rachel","Wendy"],
        ["Carol","Grace","Karen","Steve","Xavier"],
        ["David","Henry","Leo","Tina","Yara"],
        ["Emma","Irene","Mona","Paul","Uma"] ]
    ];

    function RoundManager({ roster, schedule, roundDuration }) {
      const [round, setRound] = useState(0);
      const [secs, setSecs] = useState(roundDuration * 60);

      useEffect(() => {
        const timer = setInterval(() => {
          setSecs(prev => {
            if (prev <= 1) {
              clearInterval(timer);
              if (round < schedule.length - 1) {
                setRound(r => r + 1);
                return roundDuration * 60;
              }
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
        return () => clearInterval(timer);
      }, [round, roundDuration]);

      const tableLabels = ["A","B","C","D","E"];

      return (
        <div className="p-4 bg-white rounded shadow mb-6 w-full max-w-2xl">
          <h2 className="text-xl font-bold">Round {round + 1} of {schedule.length}</h2>
          <div className="text-3xl my-2 font-mono">
            {Math.floor(secs/60)}:{String(secs%60).padStart(2,'0')}
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
            {roster.map(name => {
              const tableIndex = schedule[round].findIndex(tbl => tbl.includes(name));
              return (
                <p key={name} className="text-gray-800">
                  <span className="font-semibold">{name}</span> â†’ Table <span className="text-indigo-600">{tableLabels[tableIndex]}</span>
                </p>
              );
            })}
          </div>
        </div>
      );
    }

    function BingoApp() {
      // existing bingo app logic...
      return (
        <div className="p-4 bg-white rounded shadow w-full max-w-2xl">
          <h1 className="text-2xl font-bold mb-4 text-center">ðŸŽ¯ Human Bingo</h1>
          <p className="text-center text-gray-600 mb-4">Enter your name above then click squares to mark.</p>
          {/* Bingo card UI goes here */}
          <p className="text-center text-gray-500">[Bingo card UI placeholder]</p>
        </div>
      );
    }

    function App() {
      return (
        <div>
          <RoundManager roster={roster} schedule={schedule} roundDuration={5} />
          <BingoApp />
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>
